function [ DCA_mat ] = NMSA_to_DCA( nmsa,fcov )
% This function calculates the DCA matrix.

 % First we remove all external files.
 !rm msa.faln dca_mat.matrix

 % Here we write out the msa in fasta format.   
 nmsa_to_faln(nmsa,'msa.faln');

 % Here we perform DCA using the original code from Andrea Pagnani.
 dca('msa.faln','dca_mat.matrix');

 % Here we read in the dca matrix
 import_dca_matrix('dca_mat.matrix');
 
 % Here we convert the dca_mat.matrix into our internal matrices for both DCA
 % and MI weighted in the same way as DCA
 [ ~,DCA_mat,~,~ ] = dca_to_wMI_DCA( dca_mat,fcov );
 
 % Here we remove the external files generated at each cycle.
 clear dca_mat
 !rm msa.faln dca_mat.matrix

end


function import_dca_matrix(fileToRead1)
%IMPORTFILE(FILETOREAD1)
%  Imports data from the specified file
%  FILETOREAD1:  file to read

%  Auto-generated by MATLAB on 19-Jan-2012 17:14:35

% Import the file
rawData1 = importdata(fileToRead1);

% For some simple files (such as a CSV or JPEG files), IMPORTDATA might
% return a simple array.  If so, generate a structure so that the output
% matches that from the Import Wizard.
[~,name] = fileparts(fileToRead1);
newData1.(genvarname(name)) = rawData1;

% Create new variables in the base workspace from those fields.
vars = fieldnames(newData1);
for i = 1:length(vars)
    % Plase in the workspace
%    assignin('base', vars{i}, newData1.(vars{i}));
    % Place in the caller space
    assignin('caller', vars{i}, newData1.(vars{i}));
end

end

function [ wMI,DCA,wMI_covar_vec,DCA_covar_vec ] = dca_to_wMI_DCA( dca,fcov )
% This function returns the MI and DCA matrices and a vector of the top
% fraction of covarying residues based on the value of fcov (eg., fcov = 10
% means 10% of all positions).
npos = max(dca(:,2));
ncov = round(npos*fcov/100);

wMI = zeros(npos,npos);
DCA = zeros(npos,npos);
[nrows,~] = size(dca);

for k = 1:nrows
    i = dca(k,1);
    j = dca(k,2);
    wmi = dca(k,3);
    di = dca(k,4);
    
    wMI(i,j) = wmi;
    DCA(i,j) = di;
end

clear wmi di

wMI = wMI + wMI';
DCA = DCA + DCA';

sorted_wMI = sort_matrix_descend(wMI);
wMI_covar_vec = sorted_wMI(1:ncov,2:3);            

sorted_DCA = sort_matrix_descend(DCA);
DCA_covar_vec = sorted_DCA(1:ncov,2:3); 

for i = 1:npos
    wMI(i,i) = NaN;
    DCA(i,i) = NaN;
end

end


