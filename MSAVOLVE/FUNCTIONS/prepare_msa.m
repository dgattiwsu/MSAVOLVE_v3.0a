% This script shows an example of how to process a very large msa in order 
% to bring it to a reasonable size for coevolution analysis and for
% simulation suing MSAvolve
%--------------------------------------------------------------------------
% Here we read the msa generated by Muscle and we get the corresponding
% pdb file. 
[ATP11_smsa,ATP11_nmsa] = faln_to_nmsa('ATP11_trimto_2P4F.faln');
%--------------------------------------------------------------------------
% REMEMBER: if using aln_to_nmsa instead of faln_to_nmsa take the transpose 
% of the smsa file to ensure all the arrays are in the correct orientation.
% ATP11_smsa = ATP11_smsa';
%--------------------------------------------------------------------------
ATP11_cmsa = int2aa(ATP11_nmsa);
ref_seq_no = 103;

REF_length = size(ATP11_nmsa,2);
% Here we find all occupied positions
atp11_nogaps = ATP11_nmsa ~= 25;
ATP11_nmsa_seq_length = sum(atp11_nogaps,2);
mean_atp11_length = mean(ATP11_nmsa_seq_length);
std_atp11_length = std(ATP11_nmsa_seq_length);
% ... and all gap positions
atp11_gaps = ATP11_nmsa == 25;
ATP11_nmsa_gap_length = sum(atp11_gaps,2);
mean_gap_length = mean(ATP11_nmsa_gap_length);
std_gap_length = std(ATP11_nmsa_gap_length);
% Here we split the two sets of sequences
ATP11_nmsa_long_ind = ATP11_nmsa_seq_length>=(REF_length-1.5*std_gap_length);
ATP11_long_nmsa = ATP11_nmsa(ATP11_nmsa_long_ind,:);
ATP11_long_smsa = ATP11_smsa(ATP11_nmsa_long_ind,1);
ATP11_nmsa_short_ind = ATP11_nmsa_seq_length<(REF_length-1.5*std_gap_length);
ATP11_short_nmsa = ATP11_nmsa(ATP11_nmsa_short_ind,:);
ATP11_short_smsa = ATP11_smsa(ATP11_nmsa_short_ind,1);
% Here we write out the two sets both as msf and fasta.
multialignwrite('ATP11_long_seq.msf',ATP11_long_smsa);
multialignwrite('ATP11_short_seq.msf',ATP11_short_smsa);
fastawrite('ATP11_long_seq.faln',ATP11_long_smsa);
fastawrite('ATP11_short_seq.faln',ATP11_short_smsa);

% Here we find the new index of our reference Pseudomonas sequence, which
% before the removal of gapped sequences.
ATP11_2P4F_ind = (cumsum(ATP11_nmsa_long_ind(:,1)));
ATP11_2P4F_ind = ATP11_2P4F_ind(ref_seq_no);

% We can trim the msa such that no sequence is more than 90% identical to
% any other sequence.

[ATP11_98_nmsa,ATP11_98_smsa,new_ATP11_2P4F_ind_98] = ...
    trim_nmsa_by_threshold_2(ATP11_long_nmsa,...
    ATP11_long_smsa,0.98,ATP11_2P4F_ind);
[ATP11_95_nmsa,ATP11_95_smsa,new_ATP11_2P4F_ind_95] = ...
    trim_nmsa_by_threshold_2(ATP11_long_nmsa,...
    ATP11_long_smsa,0.95,ATP11_2P4F_ind);
[ATP11_90_nmsa,ATP11_90_smsa,new_ATP11_2P4F_ind_90] = ...
    trim_nmsa_by_threshold_2(ATP11_long_nmsa,...
    ATP11_long_smsa,0.90,ATP11_2P4F_ind);

fastawrite('ATP11_98.faln',ATP11_98_smsa);
fastawrite('ATP11_95.faln',ATP11_95_smsa);
fastawrite('ATP11_90.faln',ATP11_90_smsa);

% Or we can read in the faln file trimmed by t_coffee using the syntax:
% t_coffee -other_pg seq_reformat -in ArsC_trimto_2P4FLX_nogaps.faln -action 
% +trim _aln_%%90 'P08692|ATP111_2P4FLX' > ArsC_trimto_2P4F_90.faln
% The syntax of t_coffee allows to keep the sequence of ATP11 2P4F. The same
% result is obtained with the last entry (# of the 2P4F sequence in the msa) 
% of the input to trim_nmsa_by_threshold, 
